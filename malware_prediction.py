
import numpy as np
import pandas as pd
import os

# reader=pd.read_csv('/home/svu/e0401988/malware_prediction/train.csv',chunksize=10)
# sample_chunk=None
# for chunk in reader:
#   sample_chunk=chunk
#   print(sample_chunk)
#   break

# type(sample_chunk)

# sample_chunk.info()

# sample_chunk.columns[sample_chunk.isnull().any()]

# pd.set_option('display.max_columns', 100)
# sample_chunk.head()

# np.unique(sample_chunk['AVProductStatesIdentifier'])
# np.unique(sample_chunk['CountryIdentifier'])
# np.unique(sample_chunk['CityIdentifier'])
# np.unique(sample_chunk['Census_PrimaryDiskTotalCapacity'])

dtypes={
    'MachineIdentifier'   :   'category',
    'ProductName'         :   'category',
    'EngineVersion'       :   'category',
    'AppVersion'          :   'category',
    'AvSigVersion'        :   'category',
    'IsBeta'              :   'int8',
    'RtpStateBitfield'    :   'float16',
    'IsSxsPassiveMode'    :   'int8',
    'DefaultBrowsersIdentifier'   :   'float16',#sample_chunk doesn't have non-null value, to be verified
    'AVProductStatesIdentifier'   :   'float64',
    'AVProductsInstalled'         :   'float16',
    'AVProductsEnabled'           :   'float16',
    'HasTpm'                      :   'int8',
    'CountryIdentifier'           :   'int16',
    'CityIdentifier'              :   'float64',
    'OrganizationIdentifier'      :   'float16',
    'GeoNameIdentifier'           :   'float16',
    'LocaleEnglishNameIdentifier' :   'int16',
    'Platform'                    :   'category',
    'Processor'                   :   'category',
    'OsVer'                       :   'category',
    'OsBuild'                     :   'int32',
    'OsSuite'                     :   'int16',
    'OsPlatformSubRelease'        :   'category',
    'OsBuildLab'                  :   'category',
    'SkuEdition'                  :   'category',
    'IsProtected'                 :   'float16',
    'AutoSampleOptIn'             :   'int8',
    'PuaMode'                     :   'category',#sample_chunk doesn't have non-null value, to be verified
    'SMode'                       :   'float16',
    'IeVerIdentifier'             :   'float16',
    'SmartScreen'                 :   'category',
    'Firewall'                    :   'float16',
    'UacLuaenable'                :   'float64',
    'Census_MDC2FormFactor'       :   'category',
    'Census_DeviceFamily'         :   'category',
    'Census_OEMNameIdentifier'    :   'float16',
    'Census_OEMModelIdentifier'   :   'float64',
    'Census_ProcessorCoreCount'   :   'float16',
    'Census_ProcessorManufacturerIdentifier'    :   'float16',
    'Census_ProcessorModelIdentifier'    :   'float32',
    'Census_ProcessorClass'       :   'category',
    'Census_PrimaryDiskTotalCapacity'    :   'float32',
    'Census_PrimaryDiskTypeName'  :   'category',
    'Census_SystemVolumeTotalCapacity'   :  'float32',
    'Census_HasOpticalDiskDrive'  :   'int8',
    'Census_TotalPhysicalRAM'     :   'float32',
    'Census_ChassisTypeName'      :   'category',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches' : 'float16',
    'Census_InternalPrimaryDisplayResolutionHorizontal' : 'float32',
    'Census_InternalPrimaryDisplayResolutionVertical'   : 'float16',
    'Census_PowerPlatformRoleName':   'category',
    'Census_InternalBatteryType'  :   'category',
    'Census_InternalBatteryNumberOfCharges'   :   'float32',
    'Census_OSVersion'            :   'category',
    'Census_OSArchitecture'       :   'category',
    'Census_OSBranch'             :   'category',
    'Census_OSBuildNumber'        :   'int32',
    'Census_OSBuildRevision'      :   'int16',
    'Census_OSEdition'            :   'category',
    'Census_OSSkuName'            :   'category',
    'Census_OSInstallTypeName'    :   'category',
    'Census_OSInstallLanguageIdentifier'  :   'float16',
    'Census_OSUILocaleIdentifier' :   'int16',
    'Census_OSWUAutoUpdateOptionsName'    :   'category',
    'Census_IsPortableOperatingSystem'    :   'int8',
    'Census_GenuineStateName'     :   'category',
    'Census_ActivationChannel'    :   'category',
    'Census_IsFlightingInternal'  :   'float16',
    'Census_IsFlightsDisabled'    :   'float16',
    'Census_FlightRing'           :   'category',
    'Census_ThresholdOptIn'       :   'float16',
    'Census_FirmwareManufacturerIdentifier'   :   'float16',
    'Census_FirmwareVersionIdentifier'        :   'float64',
    'Census_IsSecureBootEnabled'  :   'int8',
    'Census_IsWIMBootEnabled'     :   'float16',
    'Census_IsVirtualDevice'      :   'float16',
    'Census_IsTouchEnabled'       :   'int8',
    'Census_IsPenCapable'         :   'int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable'   :   'float16',
    'Wdft_IsGamer'                :   'float16',
    'Wdft_RegionIdentifier'       :   'float16',
    'HasDetections'               :   'int8'
}

data=pd.read_csv('/home/svu/e0401988/malware_prediction/train.csv',dtype=dtypes)

# from IPython.display import display

# pd.set_option('display.max_rows',100)
# display(data.describe(include='all').T)

# remove machine identifier
data.drop(labels=['MachineIdentifier'],axis=1,inplace=True)

# removing irrelevant columns based on domain understanding
# Malware attack should not depend of machine display or battery characteristics
to_be_removed=['Census_InternalPrimaryDiagonalDisplaySizeInInches','Census_InternalPrimaryDisplayResolutionHorizontal',
               'Census_InternalPrimaryDisplayResolutionVertical','Census_InternalBatteryType','Census_InternalBatteryNumberOfCharges']
data.drop(labels=to_be_removed,axis=1,inplace=True)

# columns with missing values
data.isnull().sum() * 100 / len(data)

# removing columns with more than 50% missing values
to_be_removed=['DefaultBrowsersIdentifier','PuaMode','Census_ProcessorClass','Census_IsFlightingInternal','Census_ThresholdOptIn','Census_IsWIMBootEnabled']
data.drop(labels=to_be_removed,axis=1,inplace=True)

# Data Variation
# Removing columns which have little variation in data
to_be_removed=['ProductName','Platform','Processor','OsVer','Census_DeviceFamily','Census_GenuineStateName','Census_FlightRing']
data.drop(labels=to_be_removed,axis=1,inplace=True)

# check if any columns have correlation
# pd.set_option('display.max_rows',100)
data.corr().unstack().sort_values(ascending=False).drop_duplicates()[:100]

# remove columns with correlation >0.7
to_be_removed=['Census_OSEdition','Census_OSUILocaleIdentifier','Census_OSBuildNumber','OsBuild','Census_OSBranch','Census_ProcessorManufacturerIdentifier','Census_MDC2FormFactor']
data.drop(labels=to_be_removed,axis=1,inplace=True)

data.head()

# replacing missing values with median
from sklearn.preprocessing import LabelEncoder
encoders={}
medians={}
for col, val in data.items():
  if(pd.api.types.is_string_dtype(val)):
    data[col]=val.fillna(val.mode()[0])
    e=LabelEncoder()
    e.fit(data[col])
    # data[col]=val.astype('category').cat.as_ordered()
    # data[col] = data[col].cat.codes
    data[col]=e.transform(data[col])
    encoders[col]=e
    medians[col]=val.mode()[0]
  elif(pd.api.types.is_numeric_dtype(val) and val.isna().sum() > 0):
    data[col] = val.fillna(val.median())
    medians[col]=val.median()

# display(data.describe(include='all').T)

from sklearn.model_selection import train_test_split

X, Y = data.drop('HasDetections', axis=1), data['HasDetections']
X_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size=0.2)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score

def print_score(m):
    res = [roc_auc_score(m.predict(X_train), Y_train), roc_auc_score(m.predict(X_val), Y_val), 
           m.score(X_train, Y_train), m.score(X_val, Y_val)
          ]
    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)
    print(res)

m = RandomForestClassifier(n_estimators=100, min_samples_leaf=100, max_features=0.5, n_jobs=-1, oob_score=True)
m.fit(X_train, Y_train)
print_score(m)

pd.DataFrame({'features':X_train.columns,'inportance':m.feature_importances_}).sort_values(by='inportance',ascending=False)

import lightgbm as lgb

lgb_model = lgb.LGBMClassifier(max_depth=-1,n_estimators=30000,learning_rate=0.05,
                                   num_leaves=2**12-1,
                                   colsample_bytree=0.28,
                                   objective='binary')

lgb_model.fit(X_train, Y_train, eval_metric='auc', 
                  eval_set=[(X_val, Y_val)], 
                  verbose=100, early_stopping_rounds=100)

test_data=pd.read_csv('/home/svu/e0401988/malware_prediction/test.csv',dtype=dtypes)

# data['OsBuildLab'].fillna(data['OsBuildLab'].mode()[0])
# e.fit(data['OsBuildLab'])
# data['OsBuildLab']=e.transform(data['OsBuildLab'])

# test=clean_data(test_data)

# set(np.unique(test_data['EngineVersion']))-set(encoders['EngineVersion'].classes_)

# encoders['EngineVersion'].classes_

# replacing new labels to closest existing values
# def replaceLabel():
#   if(x=='1.1.11302.0'):
#     return '1.1.11202.0'
#   elif(x=='1.1.15400.3') :
#     return '1.1.15300.6'
#   elif(x=='1.1.15400.4') :
#     return '1.1.15300.6'
#   elif(x=='1.1.15400.5') :
#     return '1.1.15300.6'  
#   else:
#     return x    
# test_data['EngineVersion']=map(lambda x:replaceLabel(x),test_data['EngineVersion'])

# for col in encoders.keys():
#   print(set(test_data[col])-set(encoders[col].classes_))

# There are too many values to map, lets set unknown values to trainset median
def transform(x,col):
  try:
    r=encoders[col].transform([x])[0]
  except:
    return None
  return r

def clean_data():
  to_be_removed=['MachineIdentifier','Census_InternalPrimaryDiagonalDisplaySizeInInches','Census_InternalPrimaryDisplayResolutionHorizontal',
               'Census_InternalPrimaryDisplayResolutionVertical','Census_InternalBatteryType','Census_InternalBatteryNumberOfCharges',
               'DefaultBrowsersIdentifier','PuaMode','Census_ProcessorClass','Census_IsFlightingInternal','Census_ThresholdOptIn','Census_IsWIMBootEnabled',
               'ProductName','Platform','Processor','OsVer','Census_DeviceFamily','Census_GenuineStateName','Census_FlightRing',
               'Census_OSEdition','Census_OSUILocaleIdentifier','Census_OSBuildNumber','OsBuild','Census_OSBranch','Census_ProcessorManufacturerIdentifier','Census_MDC2FormFactor',
               ]
  test_data.drop(labels=to_be_removed,axis=1,inplace=True)
  for col, val in test_data.items():
    if(pd.api.types.is_string_dtype(val)):      
      # test[col]=encoders[col].transform(test[col])
      test_data[col]=test_data[col].apply(lambda x:transform(x,col),test_data[col])
      test_data[col]=test_data[col].fillna(transform(medians[col],col))
    if(pd.api.types.is_numeric_dtype(val) and val.isna().sum() > 0):
      test_data[col]=test_data[col].fillna(medians[col])

clean_data()

test_data.head()

print(lgb_model.predict(test_data.values))

